<div class="w-full max-w-2xl mx-auto mt-12 p-6 bg-gray-900 text-white rounded-lg shadow-md">
    <h1 class="text-3xl font-bold mb-2">String obfuscator</h1>
    <p class="text-gray-400 mb-6">
        Obfuscate a string (like a secret, an IBAN, or a token) to make it shareable and identifiable without revealing its content.
    </p>

    <!-- Input String -->
    <label class="block text-gray-300 mb-2">String to obfuscate:</label>
    <textarea id="inputText" class="w-full p-2 bg-gray-800 text-white rounded-md mb-4"></textarea>

    <!-- Options -->
    <div class="flex items-center gap-4 mb-4">
        <div>
            <label class="block text-gray-300">Keep first:</label>
            <input type="number" id="keepFirst" class="w-16 p-2 bg-gray-800 text-white rounded-md" value="4">
        </div>
        <div>
            <label class="block text-gray-300">Keep last:</label>
            <input type="number" id="keepLast" class="w-16 p-2 bg-gray-800 text-white rounded-md" value="4">
        </div>
        <div class="flex items-center">
            <label class="text-gray-300 mr-2">Keep spaces:</label>
            <input type="checkbox" id="keepSpaces" class="w-5 h-5 accent-green-500" checked>
        </div>
    </div>

    <!-- Output -->
    <div class="bg-gray-800 p-3 rounded-md flex items-center justify-between">
        <span id="outputText" class="text-gray-300">Result will appear here...</span>
        <button onclick="copyToClipboard()" class="bg-gray-700 p-2 rounded-md hover:bg-gray-600">
            ðŸ“‹
        </button>
    </div>
</div>

<script>
    async function obfuscateString() {
        const text = document.getElementById("inputText").value;
        const keepFirst = parseInt(document.getElementById("keepFirst").value) || 0;
        const keepLast = parseInt(document.getElementById("keepLast").value) || 0;
        const keepSpaces = document.getElementById("keepSpaces").checked;

        const response = await fetch("/api/text/string-obfuscator", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ text, keepFirst, keepLast, keepSpaces })
        });

        const data = await response.json();
        document.getElementById("outputText").textContent = data.result || "Error processing request";
    }

    function copyToClipboard() {
        const outputText = document.getElementById("outputText").textContent;
        navigator.clipboard.writeText(outputText).then(() => {
            alert("Copied to clipboard!");
        });
    }

    document.getElementById("inputText").addEventListener("input", obfuscateString);
    document.getElementById("keepFirst").addEventListener("input", obfuscateString);
    document.getElementById("keepLast").addEventListener("input", obfuscateString);
    document.getElementById("keepSpaces").addEventListener("change", obfuscateString);
</script>
