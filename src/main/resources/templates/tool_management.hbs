<div class="p-8">
    <div class="flex justify-between items-center mb-4">
        {{!-- Filter and search --}}
        <div class="flex gap-4 items-center">
            <div class="relative">
                <select id="categoryFilter" class="bg-gray-800 p-2 rounded-md appearance-none pl-3 pr-10">
                    <option value="">All category</option>
                    {{#categories}}
                    <option value="{{name}}">{{name}}</option>
                    {{/categories}}
                </select>
                <svg class="h-5 w-5 absolute right-2 top-1/2 transform -translate-y-1/2 pointer-events-none"
                    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
                    <path fill="#d4d4d4"
                        d="M201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z" />
                </svg>
            </div>

            <div class="relative">
                <svg class="h-5 w-5 absolute left-3 top-2.5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                    <path fill="#8e98a9"
                        d="M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L330.7 376c-34.4 25.2-76.8 40-122.7 40C93.1 416 0 322.9 0 208S93.1 0 208 0S416 93.1 416 208zM208 352a144 144 0 1 0 0-288 144 144 0 1 0 0 288z" />
                </svg>
                <input id="searchTool" class="bg-gray-800 text-white p-2 pl-10 rounded-md"
                    placeholder="Tìm kiếm người dùng...">
            </div>
        </div>

        <!-- Admin Actions Buttons -->
        <div class="flex justify-end gap-4 items-center">
            <button id="addToolBtn"
                class="bg-green-600 px-4 py-2 rounded-md hover:bg-green-700 transition cursor-pointer">
                Add New Tool
            </button>
            <button id="addCategoryBtn"
                class="bg-blue-600 px-4 py-2 rounded-md hover:bg-blue-700 transition cursor-pointer">
                Add New Category
            </button>
        </div>
    </div>



    <!-- Tools Table -->
    <div class="rounded-md overflow-hidden border border-gray-700">
        <table class="min-w-full divide-y divide-gray-700">
            <thead class="bg-gray-700">
                <tr>
                    <th scope="col"
                        class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                        No.
                    </th>
                    <th scope="col"
                        class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                        Tool Name
                    </th>
                    <th scope="col"
                        class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                        Description
                    </th>
                    <th scope="col"
                        class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                        Category
                    </th>
                    <th scope="col"
                        class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                        Active
                    </th>
                    <th scope="col"
                        class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                        Premium
                    </th>
                    <th scope="col"
                        class="px-6 py-3 text-center text-xs font-medium text-gray-300 uppercase tracking-wider">
                        Actions
                    </th>
                </tr>
            </thead>
            <tbody class="bg-gray-900 divide-y divide-blue-800" id="toolsTableBody">
                {{#tools}}
                <tr data-tool-id="{{id}}" class="hover:bg-gray-800">
                    <td class="px-6 py-4 whitespace-nowrap text-sm">
                        {{@index}}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm">
                        {{name}}
                    </td>
                    <td class="px-6 py-4 text-sm max-w-md">
                        {{description}}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm">
                        {{categoryName}}
                    </td>

                    <td class="px-6 py-4 whitespace-nowrap text-sm">
                        <label class="relative inline-flex items-center cursor-pointer">
                            <input type="checkbox" class="sr-only peer active-toggle" {{#if is_active}}checked{{/if}}
                                onchange="toggleActive({{id}}, this.checked)">
                            <div class="w-11 h-6 bg-gray-700 peer-focus:outline-none rounded-full peer 
                                peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] 
                                after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 
                                after:border after:rounded-full after:h-5 after:w-5 after:transition-all 
                                peer-checked:bg-green-600"></div>
                        </label>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm">
                        <label class="relative inline-flex items-center cursor-pointer">
                            <input type="checkbox" class="sr-only peer premium-toggle" {{#if is_premium}}checked{{/if}}
                                onchange="togglePremium({{id}}, this.checked)">
                            <div class="w-11 h-6 bg-gray-700 peer-focus:outline-none rounded-full peer 
                                peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] 
                                after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 
                                after:border after:rounded-full after:h-5 after:w-5 after:transition-all 
                                peer-checked:bg-blue-600"></div>
                        </label>
                    </td>
                    <td class="flex justify-center px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <button onclick="editTool({{id}})"
                            class="text-blue-400 hover:text-blue-300 mr-5 cursor-pointer">
                            <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                                <path fill="#1283d9"
                                    d="M471.6 21.7c-21.9-21.9-57.3-21.9-79.2 0L362.3 51.7l97.9 97.9 30.1-30.1c21.9-21.9 21.9-57.3 0-79.2L471.6 21.7zm-299.2 220c-6.1 6.1-10.8 13.6-13.5 21.9l-29.6 88.8c-2.9 8.6-.6 18.1 5.8 24.6s15.9 8.7 24.6 5.8l88.8-29.6c8.2-2.7 15.7-7.4 21.9-13.5L437.7 172.3 339.7 74.3 172.4 241.7zM96 64C43 64 0 107 0 160L0 416c0 53 43 96 96 96l256 0c53 0 96-43 96-96l0-96c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 96c0 17.7-14.3 32-32 32L96 448c-17.7 0-32-14.3-32-32l0-256c0-17.7 14.3-32 32-32l96 0c17.7 0 32-14.3 32-32s-14.3-32-32-32L96 64z" />
                            </svg>
                        </button>
                        <button class="text-red-400 hover:text-red-300 cursor-pointer deleteBtn">
                            <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
                                <path fill="#f3532b"
                                    d="M135.2 17.7L128 32 32 32C14.3 32 0 46.3 0 64S14.3 96 32 96l384 0c17.7 0 32-14.3 32-32s-14.3-32-32-32l-96 0-7.2-14.3C307.4 6.8 296.3 0 284.2 0L163.8 0c-12.1 0-23.2 6.8-28.6 17.7zM416 128L32 128 53.2 467c1.6 25.3 22.6 45 47.9 45l245.8 0c25.3 0 46.3-19.7 47.9-45L416 128z" />
                            </svg>
                        </button>
                    </td>
                </tr>
                {{/tools}}
            </tbody>
        </table>
    </div>
</div>

<!-- Tool Modal -->
<div id="toolModal"
    class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50 text-gray-200">
    <div class="bg-gray-800 p-6 rounded-lg w-full max-w-2xl">
        <h2 id="modalTitle" class="text-2xl font-bold mb-4"></h2>
        <form id="toolForm">
            <input type="hidden" id="toolId">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <div>
                    <label for="toolName" class="block text-sm font-medium mb-1">Tool Name</label>
                    <input id="toolName" type="text" class="w-full p-2 bg-gray-700 rounded-md" required>
                </div>
                <div>
                    <label for="toolCategory" class="block text-sm font-medium mb-1">Category</label>
                    <select id="toolCategory" class="w-full p-2 bg-gray-700 rounded-md">
                        {{#categories}}
                        <option value="{{id}}">{{name}}</option>
                        {{/categories}}
                    </select>
                </div>
            </div>

            <div id="toolFileInputContainer" class="mb-4 w-1/2 relative">
                <label for="toolFile" class="block text-sm font-medium mb-1">Upload .jar File</label>
                <div class="relative">
                    <input id="toolFile" type="file" accept=".jar"
                        class="absolute inset-0 opacity-0 w-full h-full cursor-pointer z-10" />
                    <div class="w-full p-2 bg-gray-700 rounded-md flex items-center">
                        <span class="mr-auto" id="fileNameDisplay">Choose a .jar file</span>
                        <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
                            <path fill="#7d96bf"
                                d="M246.6 9.4c-12.5-12.5-32.8-12.5-45.3 0l-128 128c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 109.3 192 320c0 17.7 14.3 32 32 32s32-14.3 32-32l0-210.7 73.4 73.4c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-128-128zM64 352c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 64c0 53 43 96 96 96l256 0c53 0 96-43 96-96l0-64c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 64c0 17.7-14.3 32-32 32L96 448c-17.7 0-32-14.3-32-32l0-64z" />
                        </svg>
                    </div>
                </div>
            </div>

            <div class="mb-4">
                <label for="toolDescription" class="block text-sm font-medium mb-1">Description</label>
                <textarea id="toolDescription" rows="3" class="w-full p-2 bg-gray-700 rounded-md"></textarea>
            </div>
            <div class="flex justify-between items-center">
                <div class="flex space-x-6">
                    <label class="relative inline-flex items-center cursor-pointer">
                        <span class="mr-2 text-sm text-gray-300">Active</span>
                        <input type="checkbox" id="toolActive" class="sr-only peer" checked>
                        <div class="w-11 h-6 bg-gray-700 peer-focus:outline-none rounded-full peer 
                            peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] 
                            after:absolute after:top-[2px] after:right-[22px]  after:bg-white after:border-gray-300 
                            after:border after:rounded-full after:h-5 after:w-5 after:transition-all 
                            peer-checked:bg-green-600"></div>
                    </label>
                    <label class="relative inline-flex items-center cursor-pointer">
                        <span class="mr-2 text-sm text-gray-300">Premium</span>
                        <input type="checkbox" id="toolPremium" class="sr-only peer">
                        <div class="w-11 h-6 bg-gray-700 peer-focus:outline-none rounded-full peer 
                            peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] 
                            after:absolute after:top-[2px] after:right-[22px] after:bg-white after:border-gray-300 
                            after:border after:rounded-full after:h-5 after:w-5 after:transition-all 
                            peer-checked:bg-blue-600"></div>
                    </label>
                </div>
                <div class="flex space-x-2">
                    <button type="button" id="closeToolModal"
                        class="px-4 py-2 bg-gray-600 rounded-md hover:bg-gray-500 cursor-pointer">
                        Cancel
                    </button>
                    <button type="submit" class="px-4 py-2 bg-blue-600 rounded-md hover:bg-blue-500 cursor-pointer">
                        Save
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

{{!-- Category Modal --}}
<div id="categoryModal"
    class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50 text-gray-200">
    <div class="bg-gray-800 p-6 rounded-lg w-full max-w-2xl">
        <h2 class="text-2xl font-bold mb-4">Add Category</h2>
        <form id="categoryForm">
            <div class="mb-4">
                <label for="categoryName" class="block text-sm font-medium mb-1">Category Name</label>
                <input id="categoryName" type="text" class="w-full p-2 bg-gray-700 rounded-md" required>
            </div>

            <div class="mb-4">
                <label for="categoryDescription" class="block text-sm font-medium mb-1">Description</label>
                <textarea id="categoryDescription" rows="3" class="w-full p-2 bg-gray-700 rounded-md"></textarea>
            </div>
            <div class="flex space-x-2 justify-end">
                <button type="button" id="closeCategoryModal"
                    class="px-4 py-2 bg-gray-600 rounded-md hover:bg-gray-500 cursor-pointer">
                    Cancel
                </button>
                <button type="submit" class="px-4 py-2 bg-blue-600 rounded-md hover:bg-blue-500 cursor-pointer">
                    Save
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="deleteConfirmModal"
    class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50 text-gray-200">
    <div class="bg-gray-800 p-6 rounded-lg w-full max-w-md">
        <h2 class="text-xl font-bold mb-4">Confirm Delete</h2>
        <p class="mb-6">Are you sure you want to delete this tool? This action cannot be undone.</p>
        <input type="hidden" id="deleteToolId">
        <div class="flex justify-end space-x-3">
            <button id="cancelDelete" class="px-4 py-2 bg-gray-600 rounded-md hover:bg-gray-500 cursor-pointer">
                Cancel
            </button>
            <button id="confirmDelete" class="px-4 py-2 bg-red-600 rounded-md hover:bg-red-700 cursor-pointer">
                Ok
            </button>
        </div>
    </div>
</div>

<script>
    // Toggle Premium status
    function togglePremium(toolId, isPremium) {
        fetch(`/api/tool/${toolId}/premium`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ isPremium: isPremium })
        })
            .then(response => response.json())
            .then(isSuccess => {
                if (!isSuccess) {
                    showMessage('Failed to update premium status. Please try again!', true);
                }
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }

    // Toggle Active status
    function toggleActive(toolId, isActive) {
        fetch(`/api/tool/${toolId}/active`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ isActive: isActive })
        })
            .then(response => response.json())
            .then(isSuccess => {
                if (!isSuccess) {
                    showMessage('Failed to update active status. Please try again!', true);
                }
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }

    // Edit Tool
    function editTool(toolId) {
        fetch(`/api/tool/${toolId}`)
            .then(response => response.json())
            .then(tool => {
                if (tool) {
                    document.getElementById("toolFileInputContainer").classList.add("hidden");

                    document.getElementById('modalTitle').textContent = 'Edit Tool';
                    document.getElementById('toolId').value = tool.id;
                    document.getElementById('toolName').value = tool.name;
                    document.getElementById('toolDescription').value = tool.description;
                    document.getElementById('toolCategory').value = tool.category.id;
                    document.getElementById('toolPremium').checked = tool.isPremium;
                    document.getElementById('toolActive').checked = tool.isActive;
                    document.getElementById('toolModal').classList.remove('hidden');
                }
            })
            .catch(error => console.error('Error:', error));
    }

    // Show floating message
    function showMessage(message, isError = false) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `fixed right-10 top-10 text-white p-4 rounded-full opacity-100 duration-2000 z-50 ${isError ? 'bg-red-500' : 'bg-green-500'}`;
        messageDiv.textContent = message;
        document.body.appendChild(messageDiv);

        setTimeout(() => {
            messageDiv.style.opacity = 0;
            setTimeout(() => messageDiv.remove(), 1000);
        }, 3000);
    }

    // Document Ready
    document.addEventListener('DOMContentLoaded', function () {
        // Add Tool Button
        document.getElementById('addToolBtn').addEventListener('click', function () {
            document.getElementById('modalTitle').textContent = 'Add Tool';
            document.getElementById('toolForm').reset();
            document.getElementById('toolId').value = '';
            document.getElementById('toolModal').classList.remove('hidden');
        });

        // Add Category Button
        document.getElementById('addCategoryBtn').addEventListener('click', function () {
            document.getElementById('categoryForm').reset();
            document.getElementById('categoryModal').classList.remove('hidden');
        });

        // Close Modal
        document.getElementById('closeToolModal').addEventListener('click', function () {
            document.getElementById('toolModal').classList.add('hidden');
        });
        document.getElementById('closeCategoryModal').addEventListener('click', function () {
            document.getElementById('categoryModal').classList.add('hidden');
        });

        // Tool Form Submit
        document.getElementById('toolForm').addEventListener('submit', function (e) {
            e.preventDefault();

            const toolId = document.getElementById('toolId').value;
            const toolName = document.getElementById('toolName').value;
            const categorySelect = document.getElementById('toolCategory');
            const categoryId = categorySelect.value;
            const categoryText = categorySelect.options[categorySelect.selectedIndex].text;

            const formattedCategory = categoryText.toLowerCase();
            const formattedToolName = toolName.toLowerCase().replace(/\s+/g, '-');
            const endpoint = `/${formattedCategory}/${formattedToolName}`;

            const toolData = {
                name: toolName,
                description: document.getElementById('toolDescription').value,
                endpoint: endpoint,
                category_id: Number(categoryId),
                is_premium: document.getElementById('toolPremium').checked,
                is_active: document.getElementById('toolActive').checked
            };

            const url = toolId ? `/api/tool/${toolId}` : '/api/tool';
            const method = toolId ? 'PUT' : 'POST';

            fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(toolData)
            })
                .then(response => response.json())
                .then(isSuccess => {
                    if (isSuccess) {
                        document.getElementById('toolModal').classList.add('hidden');
                        location.reload();
                    } else {
                        showMessage('Tool name already exists. Try another name!', true);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        });

        // Category Form Submit
        document.getElementById('categoryForm').addEventListener('submit', function (e) {
            e.preventDefault();

            const categoryName = document.getElementById('categoryName').value;
            const categoryDescription = document.getElementById('categoryDescription').value;

            const categoryData = {
                name: categoryName,
                description: categoryDescription
            };

            const url = `/api/category`;
            const method = 'POST';

            fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(categoryData)
            })
                .then(response => response.json())
                .then(isSuccess => {
                    if (isSuccess) {
                        document.getElementById('categoryModal').classList.add('hidden');
                        location.reload();
                    } else {
                        showMessage('Category name already exists. Try another name!', true);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        });

        // Delete Tool Button
        document.querySelectorAll(".deleteBtn").forEach(button => {
            button.addEventListener('click', function (e) {
                const toolId = this.closest('tr').getAttribute('data-tool-id');
                document.getElementById('deleteToolId').value = toolId;
                document.getElementById('deleteConfirmModal').classList.remove('hidden');
            });
        });

        document.getElementById("cancelDelete").addEventListener("click", function () {
            document.getElementById('deleteConfirmModal').classList.add('hidden');
        });

        document.getElementById("confirmDelete").addEventListener("click", function () {
            const toolId = document.getElementById('deleteToolId').value;
            fetch(`/api/tool/${toolId}`, {
                method: 'DELETE'
            })
                .then(response => response.json())
                .then(isSuccess => {
                    if (isSuccess) {
                        location.reload();
                    } else {
                        showMessage('Failed to delete tool. Please try again!', true);
                    }
                    document.getElementById('deleteConfirmModal').classList.add('hidden');
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        });

        // File input change event
        document.getElementById('toolFile').addEventListener('change', function (e) {
            if (e.target.files.length > 0) {
                const fileName = e.target.files[0].name;
                document.getElementById('fileNameDisplay').textContent = fileName;
            } else {
                document.getElementById('fileNameDisplay').textContent = 'Choose a .jar file';
            }
        });
    });
</script>

<script>
    const categoryFilter = document.getElementById('categoryFilter');
    const searchTool = document.getElementById('searchTool');
    const toolsTableBody = document.getElementById('toolsTableBody');
    const toolsRows = Array.from(toolsTableBody.querySelectorAll('tr'));

    function filterTools() {
        const selectedCategory = categoryFilter.value.toLowerCase();
        const searchTerm = searchTool.value.toLowerCase();

        toolsRows.forEach(row => {
            const toolName = row.querySelector('td:nth-child(2)').textContent.toLowerCase();
            const categoryName = row.querySelector('td:nth-child(4)').textContent.toLowerCase();

            const matchesCategory = selectedCategory === '' || categoryName.includes(selectedCategory);
            const matchesSearch = toolName.includes(searchTerm);

            if (matchesCategory && matchesSearch) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    }

    categoryFilter.addEventListener('change', filterTools);
    searchTool.addEventListener('input', filterTools);
</script>